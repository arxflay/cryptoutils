# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: configure-build-test

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-22.04, windows-2022]
        build_type: [Release, Debug]
        build_arch: [x86, x64]
        include:
          - os: ubuntu-22.04
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-2022
            c_compiler: cl
            cpp_compiler: cl
        exclude:
          - os: ubuntu-22.04
            build_arch: x86
    steps:
    - uses: actions/checkout@v3
    
    - name: Download fmt from repository
      if: runner.os == 'Linux'
      run: sudo apt install -y libfmt-dev

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Set upload vars
      id: uploadvars
      shell: bash
      run: |
        echo "path=${{ runner.os == 'Windows' && format('{0}\{1}\cryptoutils.exe', steps.strings.outputs.build-output-dir, matrix.build_type) 
              || format('{0}/cryptoutils', steps.strings.outputs.build-output-dir) }}" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        ${{ runner.os == 'Windows' && ((matrix.build_arch == 'x86' && '-A Win32') || (matrix.build_arch == 'x64' && '-A x64'))
            || ''}}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
      
    - name: Upload artificats
      uses: actions/upload-artifact@v3
      with:
        name: ${{ format('{0}_{1}_{2}', matrix.os, matrix.build_type,  matrix.build_arch) }}
        path: ${{ steps.uploadvars.outputs.path }}
